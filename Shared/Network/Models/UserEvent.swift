//
//  UserEvent.swift
//  ManageYourStars
//
//  Created by 陈仕鹏 on 06/09/18.
//  Copyright © 2017 csp. All rights reserved.
//
//  -- auto-generated by JSON2Swift --
//

import Foundation
import SwiftUI
import Combine
public struct UserEvent: Codable,Identifiable {
    var repo: Repo?
    public var id: String?
    var created_at: Date?
    var payload: Payload?
    var actor: Actor?
    var `public`: Bool?
    var type: EventAction?
    var org:Org?
    
    public var actionDes:String{
        switch type {
        case .PushEvent:
            var str = ""
            if let user = actor?.login {
                str += user
            }
            let action = " pushed to "
            str += action
            if let branch = payload?.ref?.split(separator: "/", maxSplits: Int.max, omittingEmptySubsequences: true).last {
                str += branch
            }
            if let location = repo?.name {
                str += " at " + location
            }
            return str
        case .MemberEvent:
            var str = ""
            if let user = actor?.login {
                str += user
            }
            let action = payload?.action
            str += action ?? ""
            
            if let user = payload?.member?.login {
                str +=  " " + user + " as a collabortor to"
            }
            if let branch = repo?.name {
                str += branch
            }
            return str
        case .IssuesEvent:
            var str = ""
            if let user = actor?.login{
                str += user
            }
            if let action = payload?.action {
                str += " " + action
            }
            if let IssueNumber = payload?.issue?.number{
                str += " " + "#" + String(IssueNumber)
            }
            if let location = repo?.name{
                str += " in " + location
            }
            return str
        case .IssueCommentEvent:
            var str = ""
            if let user = actor?.login{
                str += user
            }
            let action = " commented on issue "
            str += action
            if let IssueNumber = payload?.issue?.number{
                str += " " + "#" + String(IssueNumber)
            }
            if let location = repo?.name{
                str += " in " + location
            }
            return str
        case .WatchEvent:
            var str = ""
            if let user = actor?.login{
                str += user
            }
            if let action = payload?.action {
                str += " " + action
            }
            if let location = repo?.name {
                str += " " + location
            }
            
            return str
        case .ForkEvent:
            var str = ""
            if let user = actor?.login{
                str += user
            }
            let action = " forked "
            str += action
            if let source = repo?.name {
                str += " " + source
            }
            if let location = payload?.forkee?.full_name {
                str += " to " + location
            }
            
            return str
        case .CreateEvent:
            var str = ""
            if let user = actor?.login{
                str += user
            }
            let action = " create "
            str += action
            if let source = repo?.name {
                str += " " + source
            }
            
            return str
        case .CommitCommentEvent:
            var str = ""
            if let user = actor?.login{
                str += user
            }
            let action = " commented on commit "
            str += action
            if let commitId = payload?.comment?.commit_id{
                str += " " + commitId
            }
            if let source = repo?.name {
                str += " on " + source
            }
            
            return str
        case .PullRequestEvent,.PullRequestReviewCommentEvent:
            var str = ""
            if let user = actor?.login{
                str += user
            }
            if let action = payload?.action {
                str += " " + action
            }
            str += " pull request"
            if let number = payload?.pull_request?.number {
                str += " " + "\(number)"
            }
            
            if let location = repo?.name {
                str += " with " + location
            }
            
            return str
        case .DeleteEvent:
            var str = ""
            if let user = actor?.login{
                str += user
            }
            let action = " delete "
            str += action
            if let source = repo?.name {
                str += source
            }
            return str
        default:
            return ""
        }
    }

}
enum EventAction:String,Codable{
    case PushEvent,MemberEvent,IssuesEvent,IssueCommentEvent,WatchEvent,ForkEvent,CreateEvent,CommitCommentEvent,PullRequestEvent,PullRequestReviewCommentEvent,DeleteEvent
}
